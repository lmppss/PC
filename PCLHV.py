# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkgJpsrPLf54vXV3wMqcJXu2RLl27OGj
"""

import streamlit as st
import numpy as np
import pandas as pd
import joblib
import datetime
import pytz
import plotly.express as px
import os
from io import BytesIO

# Cargar el modelo
modelo = joblib.load("PC_0.8722_12.04.pkl")

# Ruta del historial
historial_path = "historial_predicciones.csv"
if not os.path.exists(historial_path):
    pd.DataFrame(columns=["FechaHora", "Cenizas", "PC"]).to_csv(historial_path, index=False)

# Leer historial
historial = pd.read_csv(historial_path)
historial["FechaHora"] = pd.to_datetime(historial["FechaHora"], errors='coerce')

# T√≠tulo principal
st.title("üî• Predicci√≥n del Poder Calor√≠fico del Carb√≥n")
st.markdown("Ingrese los datos manualmente o pegue una fila completa separada por **coma, espacio o tabulaci√≥n**.")

# Entrada r√°pida
st.subheader("üìã Entrada r√°pida (una l√≠nea completa)")
entrada_linea = st.text_input("Pegue aqu√≠ una fila completa con los 11 valores en orden:")

# Entrada manual expandible
with st.expander("üìù Ingresar manualmente los valores"):
    cenizas_bs = st.number_input("Cenizas (BS) (%)", min_value=0.0)
    sio2 = st.number_input("SiO2 ash (%)", min_value=0.0)
    al2o3 = st.number_input("Al2O3 ash (%)", min_value=0.0)
    fe2o3 = st.number_input("Fe2O3 ash (%)", min_value=0.0)
    cao = st.number_input("CaO ash (%)", min_value=0.0)
    mgo = st.number_input("MgO ash (%)", min_value=0.0)
    so3 = st.number_input("SO3 ash (%)", min_value=0.0)
    na2o = st.number_input("Na2O ash (%)", min_value=0.0)
    k2o = st.number_input("K2O ash (%)", min_value=0.0)
    s_carbon = st.number_input("S carb√≥n (%)", min_value=0.0)
    cl_carbon = st.number_input("Cl carb√≥n (%)", min_value=0.0)

# Bot√≥n de predicci√≥n
if st.button("üîÆ Predecir Poder Calor√≠fico"):
    if entrada_linea:
        sep = "," if "," in entrada_linea else ("\t" if "\t" in entrada_linea else " ")
        try:
            valores = list(map(float, entrada_linea.strip().split(sep)))
            if len(valores) != 11:
                st.error("‚ö†Ô∏è Debe ingresar exactamente 11 valores.")
                st.stop()
        except:
            st.error("‚ö†Ô∏è Error en el formato de la l√≠nea pegada.")
            st.stop()
    else:
        valores = [cenizas_bs, sio2, al2o3, fe2o3, cao, mgo, so3, na2o, k2o, s_carbon, cl_carbon]

    valores_np = np.array(valores).reshape(1, -1)
    pc_predicho = modelo.predict(valores_np)[0]
    pc_entero = int(round(pc_predicho))

    # Mostrar resultado
    st.success(f"üî• Poder Calor√≠fico Predicho: **{pc_entero} kcal/kg**")

    # Guardar predicci√≥n
    nueva_fila = pd.DataFrame([{
        "FechaHora": datetime.datetime.now(pytz.timezone('America/Lima')).strftime('%Y-%m-%d %H:%M:%S'),
        "Cenizas": valores[0],
        "PC": pc_entero
    }])
    historial = pd.concat([historial, nueva_fila], ignore_index=True).tail(20)
    historial.to_csv(historial_path, index=False)

# Convertir fecha y filtrar √∫ltimos 3 d√≠as
historial["FechaHora"] = pd.to_datetime(historial["FechaHora"], errors='coerce')
historial["FechaHora"] = historial["FechaHora"].dt.tz_localize('UTC').dt.tz_convert('America/Lima')
fecha_3_dias_atras = datetime.datetime.now(pytz.timezone('America/Lima')) - datetime.timedelta(days=3)
historial_filtrado = historial[historial["FechaHora"] >= fecha_3_dias_atras] if not historial.empty else historial

# Gr√°fico
st.subheader("üìà Historial de Predicciones (√∫ltimos 3 d√≠as)")
fig = px.scatter(historial_filtrado, x="FechaHora", y="PC",
                 size="Cenizas", color="Cenizas",
                 hover_data=["Cenizas", "PC"],
                 title="Predicciones de Poder Calor√≠fico vs Cenizas",
                 labels={"PC": "Poder Calor√≠fico (kcal/kg)", "FechaHora": "Hora"},
                 template="plotly_dark")
fig.update_traces(mode="markers+lines")
st.plotly_chart(fig, use_container_width=True)

# Tabla editable con opci√≥n de eliminar
st.subheader("üìã Cuadro resumen de predicciones")
historial_reset = historial.reset_index(drop=True)
row_to_delete = st.multiselect("Selecciona las filas que deseas eliminar:", historial_reset.index.tolist())
st.dataframe(historial_reset)

if st.button("üóëÔ∏è Eliminar filas seleccionadas"):
    if row_to_delete:
        historial_reset = historial_reset.drop(row_to_delete)
        historial_reset.to_csv(historial_path, index=False)
        st.success("‚úÖ Filas eliminadas correctamente.")
    else:
        st.warning("‚ö†Ô∏è No seleccionaste ninguna fila.")
    st.experimental_rerun()

# Bot√≥n para descargar Excel
st.subheader("üì• Descargar historial completo")
historial_excel = historial_reset.copy()
historial_excel["FechaHora"] = historial_excel["FechaHora"].dt.strftime('%Y-%m-%d %H:%M:%S')
output = BytesIO()
with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
    historial_excel.to_excel(writer, index=False, sheet_name='Historial')
    writer.save()
    output.seek(0)

st.download_button(
    label="üì§ Descargar Excel",
    data=output,
    file_name="historial_predicciones.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)