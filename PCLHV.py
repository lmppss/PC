# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkgJpsrPLf54vXV3wMqcJXu2RLl27OGj
"""

import streamlit as st
import numpy as np
import pandas as pd
import joblib
import datetime
import pytz
import plotly.express as px
import os
from io import BytesIO

# Cargar el modelo .pkl
modelo = joblib.load("PC_0.8722_12.04.pkl")

# Ruta del historial
historial_path = "historial_predicciones.csv"

# Inicializar historial si no existe
columnas = ["FechaHora", "Cenizas (BS) (%)", "SiO2 ash (%)", "Al2O3 ash (%)", "Fe2O3 ash (%)",
            "CaO ash (%)", "MgO ash (%)", "SO3 ash (%)", "Na2O ash (%)",
            "K2O ash (%)", "S carb√≥n (%)", "Cl carb√≥n (%)", "PC"]
if not os.path.exists(historial_path):
    pd.DataFrame(columns=columnas).to_csv(historial_path, index=False)

# T√≠tulo
st.title("üî• Predicci√≥n del Poder Calor√≠fico del Carb√≥n")
st.markdown("Ingrese los datos manualmente o pegue una fila completa separada por **coma, espacio o tabulaci√≥n**.")

# Entrada r√°pida
st.subheader("üìã Entrada r√°pida (una l√≠nea completa)")
entrada_linea = st.text_input("Pegue aqu√≠ una fila completa con los 11 valores en orden:")

# Alternancia de entrada manual
if "mostrar_manual" not in st.session_state:
    st.session_state.mostrar_manual = False
if st.button("üìù Mostrar entrada manual"):
    st.session_state.mostrar_manual = not st.session_state.mostrar_manual

# Campos manuales
if st.session_state.mostrar_manual:
    cenizas_bs = st.number_input("Cenizas (BS) (%)", min_value=0.0)
    sio2 = st.number_input("SiO2 ash (%)", min_value=0.0)
    al2o3 = st.number_input("Al2O3 ash (%)", min_value=0.0)
    fe2o3 = st.number_input("Fe2O3 ash (%)", min_value=0.0)
    cao = st.number_input("CaO ash (%)", min_value=0.0)
    mgo = st.number_input("MgO ash (%)", min_value=0.0)
    so3 = st.number_input("SO3 ash (%)", min_value=0.0)
    na2o = st.number_input("Na2O ash (%)", min_value=0.0)
    k2o = st.number_input("K2O ash (%)", min_value=0.0)
    s_carbon = st.number_input("S carb√≥n (%)", min_value=0.0)
    cl_carbon = st.number_input("Cl carb√≥n (%)", min_value=0.0)

# Bot√≥n de predicci√≥n
if st.button("üîÆ Predecir Poder Calor√≠fico"):
    if entrada_linea:
        if "," in entrada_linea:
            sep = ","
        elif "\t" in entrada_linea:
            sep = "\t"
        else:
            sep = " "
        try:
            valores = list(map(float, entrada_linea.strip().split(sep)))
            if len(valores) != 11:
                st.error("‚ö†Ô∏è Debe ingresar exactamente 11 valores.")
                st.stop()
        except:
            st.error("‚ö†Ô∏è Error en el formato de la l√≠nea pegada.")
            st.stop()
    else:
        valores = [cenizas_bs, sio2, al2o3, fe2o3, cao, mgo, so3, na2o, k2o, s_carbon, cl_carbon]

    valores_np = np.array(valores).reshape(1, -1)
    pc_predicho = modelo.predict(valores_np)[0]
    pc_entero = int(round(pc_predicho))

    st.success(f"üî• Poder Calor√≠fico Predicho: **{pc_entero} kcal/kg**")

    # Guardar predicci√≥n
    ahora_lima = datetime.datetime.now(pytz.timezone('America/Lima'))
    nuevo = pd.DataFrame([{
        "FechaHora": ahora_lima.strftime('%Y-%m-%d %H:%M:%S'),
        "Cenizas (BS) (%)": valores[0],
        "SiO2 ash (%)": valores[1],
        "Al2O3 ash (%)": valores[2],
        "Fe2O3 ash (%)": valores[3],
        "CaO ash (%)": valores[4],
        "MgO ash (%)": valores[5],
        "SO3 ash (%)": valores[6],
        "Na2O ash (%)": valores[7],
        "K2O ash (%)": valores[8],
        "S carb√≥n (%)": valores[9],
        "Cl carb√≥n (%)": valores[10],
        "PC": pc_entero
    }])
    historial = pd.read_csv(historial_path)
    historial = pd.concat([historial, nuevo], ignore_index=True)
    historial.to_csv(historial_path, index=False)

# Leer historial completo
historial = pd.read_csv(historial_path)
historial["FechaHora"] = pd.to_datetime(historial["FechaHora"], errors='coerce')
historial["FechaHora"] = historial["FechaHora"].dt.tz_localize("America/Lima", ambiguous='NaT', nonexistent='shift_forward')

# Filtrar √∫ltimos 3 d√≠as
fecha_3_dias_atras = pd.Timestamp.now(tz="America/Lima") - pd.Timedelta(days=3)
historial_filtrado = historial[historial["FechaHora"] >= fecha_3_dias_atras].copy()

# Limpiar para gr√°fico
historial_filtrado = historial_filtrado.dropna(subset=["Cenizas (BS) (%)", "PC"])
historial_filtrado = historial_filtrado[historial_filtrado["Cenizas (BS) (%)"].apply(lambda x: isinstance(x, (int, float)))]

# Mostrar gr√°fico
if not historial_filtrado.empty:
    st.subheader("üìà Historial de Predicciones (√∫ltimos 3 d√≠as)")
    fig = px.scatter(historial_filtrado, x="FechaHora", y="PC",
                     size="Cenizas (BS) (%)", color="Cenizas (BS) (%)",
                     hover_data=["Cenizas (BS) (%)", "PC"],
                     title="Poder Calor√≠fico vs Cenizas",
                     labels={"PC": "Poder Calor√≠fico (kcal/kg)", "FechaHora": "Hora"},
                     template="plotly_dark")
    fig.update_traces(mode="markers+lines")
    st.plotly_chart(fig, use_container_width=True)

# Mostrar resumen editable
st.subheader("üóÉÔ∏è Resumen de predicciones recientes (√∫ltimos 20)")
historial_reciente = historial.tail(20).copy()
historial_reciente["Eliminar"] = False
edited_df = st.data_editor(historial_reciente, num_rows="dynamic", use_container_width=True)

# Eliminar seleccionadas
if st.button("‚ùå Eliminar seleccionadas"):
    eliminadas = edited_df[edited_df["Eliminar"] == True]
    if not eliminadas.empty:
        historial = historial[~historial["FechaHora"].isin(eliminadas["FechaHora"])]
        historial.to_csv(historial_path, index=False)
        st.success(f"Se eliminaron {len(eliminadas)} predicciones.")
        st.rerun()
    else:
        st.warning("No se seleccionaron filas para eliminar.")

# Bot√≥n de descarga del historial completo
st.subheader("üì• Descargar historial completo")
output = BytesIO()
with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
    historial.to_excel(writer, index=False, sheet_name='Historial')
output.seek(0)
st.download_button(
    label="üì§ Descargar Excel",
    data=output,
    file_name="historial_predicciones.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)