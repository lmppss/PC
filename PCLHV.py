# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkgJpsrPLf54vXV3wMqcJXu2RLl27OGj
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import joblib
import pytz
from datetime import datetime, timedelta
import os

st.set_page_config(layout="wide")

# === Cargar modelo ===
modelo = joblib.load("modelo_PC.pkl")

# === T√≠tulo ===
st.title("üß† Predicci√≥n del Poder Calor√≠fico del Carb√≥n Fino")

# === Ingreso de datos ===
st.sidebar.header("üì• Ingreso de datos")

campos = [
    "SiO2 ash (%)", "Al2O3 ash (%)", "Fe2O3 ash (%)", "CaO ash (%)", "MgO ash (%)",
    "SO3 ash (%)", "Na2O ash (%)", "K2O ash (%)", "S carb√≥n (%)", "Cl carb√≥n (%)", "Cenizas (BS) (%)"
]

valores = {}
for campo in campos:
    valores[campo] = st.sidebar.number_input(campo, value=0.0)

# === Fecha y hora actual en Per√∫ ===
tz = pytz.timezone("America/Lima")
fecha_hora = datetime.now(tz)

# === Predicci√≥n ===
if st.sidebar.button("üîç Predecir"):
    entrada = pd.DataFrame([valores])
    pc_predicho = modelo.predict(entrada.drop(columns=["Cenizas (BS) (%)"]))[0]

    # Mostrar resultado
    st.subheader("üîé Resultado de la predicci√≥n")
    st.metric("Poder Calor√≠fico (PC)", f"{pc_predicho:.2f} kcal/kg")

    # Crear fila de historial
    nueva_fila = entrada.copy()
    nueva_fila["FechaHora"] = fecha_hora
    nueva_fila["PC"] = pc_predicho

    # === Guardar historial completo ===
    archivo_historial = "historial_completo.csv"
    if os.path.exists(archivo_historial):
        historial = pd.read_csv(archivo_historial)
        historial["FechaHora"] = pd.to_datetime(historial["FechaHora"])
        historial = pd.concat([historial, nueva_fila], ignore_index=True)
    else:
        historial = nueva_fila.copy()

    historial.to_csv(archivo_historial, index=False)
    st.success("‚úÖ Predicci√≥n guardada en el historial.")

# === Mostrar historial de los √∫ltimos 3 d√≠as ===
if os.path.exists("historial_completo.csv"):
    historial = pd.read_csv("historial_completo.csv")
    historial["FechaHora"] = pd.to_datetime(historial["FechaHora"])

    # Limpieza para evitar errores en el gr√°fico
    historial["PC"] = pd.to_numeric(historial["PC"], errors="coerce")
    historial["Cenizas (BS) (%)"] = pd.to_numeric(historial["Cenizas (BS) (%)"], errors="coerce")
    historial = historial.dropna(subset=["PC", "Cenizas (BS) (%)", "FechaHora"])

    # Filtro de √∫ltimos 3 d√≠as
    hace_3_dias = datetime.now(pytz.timezone("America/Lima")) - timedelta(days=3)
    historial_filtrado = historial[historial["FechaHora"] >= hace_3_dias]

    # Mostrar tabla resumen
    st.subheader("üìä Historial de predicciones (√∫ltimos 3 d√≠as)")
    st.dataframe(historial_filtrado.sort_values("FechaHora", ascending=False), use_container_width=True)

    # === Gr√°fico ===
    fig = px.scatter(
        historial_filtrado,
        x="FechaHora",
        y="PC",
        color="Cenizas (BS) (%)",
        size_max=12,
        color_continuous_scale="Viridis",
        title="Evoluci√≥n del Poder Calor√≠fico vs Fecha",
        labels={"PC": "Poder Calor√≠fico (kcal/kg)", "FechaHora": "Fecha y Hora"}
    )
    fig.update_layout(height=500)
    st.plotly_chart(fig, use_container_width=True)

    # === Bot√≥n para descargar todo el historial limpio ===
    st.subheader("üì• Descargar historial completo")

    # Validar y limpiar columnas num√©ricas
    columnas_numericas = [col for col in historial.columns if "(%)" in col or col == "PC"]
    for col in columnas_numericas:
        historial[col] = pd.to_numeric(historial[col], errors="coerce")

    historial_limpio = historial.dropna(subset=["FechaHora", "PC", "Cenizas (BS) (%)"])
    historial_limpio = historial_limpio.sort_values(by="FechaHora")

    st.download_button(
        label="‚¨áÔ∏è Descargar historial completo (.csv)",
        data=historial_limpio.to_csv(index=False).encode("utf-8"),
        file_name="historial_limpio.csv",
        mime="text/csv"
    )