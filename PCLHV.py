# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkgJpsrPLf54vXV3wMqcJXu2RLl27OGj
"""

import streamlit as st
import numpy as np
import pandas as pd
import joblib
import datetime
import pytz
import plotly.express as px
import os
from io import BytesIO

# Cargar el modelo .pkl
modelo = joblib.load("PC_0.8722_12.04.pkl")

# Ruta del historial
historial_path = "historial_predicciones.csv"

# Columnas de entrada
columnas = ["Cenizas (BS) (%)", "SiO2 ash (%)", "Al2O3 ash (%)", "Fe2O3 ash (%)", "CaO ash (%)",
            "MgO ash (%)", "SO3 ash (%)", "Na2O ash (%)", "K2O ash (%)", "S carb√≥n (%)", "Cl carb√≥n (%)"]

# Inicializar historial si no existe
if not os.path.exists(historial_path):
    columnas_historial = columnas + ["PC", "FechaHora"]
    pd.DataFrame(columns=columnas_historial).to_csv(historial_path, index=False)

# T√≠tulo de la app
st.title("üî• Predicci√≥n del Poder Calor√≠fico del Carb√≥n")
st.markdown("Ingrese los datos manualmente o pegue una fila completa separada por **coma, espacio o tabulaci√≥n**.")

# Entrada r√°pida
st.subheader("üìã Entrada r√°pida (una l√≠nea completa)")
entrada_linea = st.text_input("Pegue aqu√≠ una fila completa con los 11 valores en orden:")

# Mostrar/ocultar entrada manual
if "mostrar_manual" not in st.session_state:
    st.session_state.mostrar_manual = False

if st.button("üìù Mostrar entrada manual"):
    st.session_state.mostrar_manual = not st.session_state.mostrar_manual

# Entrada manual
if st.session_state.mostrar_manual:
    valores = []
    for col in columnas:
        val = st.number_input(col, min_value=0.0)
        valores.append(val)

# Predicci√≥n
if st.button("üîÆ Predecir Poder Calor√≠fico"):
    if entrada_linea:
        if "," in entrada_linea:
            sep = ","
        elif "\t" in entrada_linea:
            sep = "\t"
        else:
            sep = " "
        try:
            valores = list(map(float, entrada_linea.strip().split(sep)))
            if len(valores) != 11:
                st.error("‚ö†Ô∏è Debe ingresar exactamente 11 valores.")
                st.stop()
        except:
            st.error("‚ö†Ô∏è Error en el formato de la l√≠nea pegada.")
            st.stop()

    valores_np = np.array(valores).reshape(1, -1)
    pc_predicho = modelo.predict(valores_np)[0]
    pc_entero = int(round(pc_predicho))

    st.success(f"üî• Poder Calor√≠fico Predicho: **{pc_entero} kcal/kg**")

    # Guardar en historial completo
    ahora_lima = datetime.datetime.now(pytz.timezone('America/Lima'))
    nuevo = pd.DataFrame([valores], columns=columnas)
    nuevo["PC"] = pc_entero
    nuevo["FechaHora"] = ahora_lima.strftime('%Y-%m-%d %H:%M:%S')

    historial = pd.read_csv(historial_path)
    historial = pd.concat([historial, nuevo], ignore_index=True)
    historial.to_csv(historial_path, index=False)

# Cargar historial completo
historial = pd.read_csv(historial_path)

# Mostrar gr√°fico si hay datos
if not historial.empty:
    historial["FechaHora"] = pd.to_datetime(historial["FechaHora"], errors='coerce')
    historial["FechaHora"] = historial["FechaHora"].dt.tz_localize("America/Lima", ambiguous='NaT', nonexistent='shift_forward')

    # Gr√°fico √∫ltimos 3 d√≠as
    fecha_3_dias_atras = pd.Timestamp.now(tz="America/Lima") - pd.Timedelta(days=3)
    historial_filtrado = historial[historial["FechaHora"] >= fecha_3_dias_atras]

    st.subheader("üìà Historial de Predicciones (√∫ltimos 3 d√≠as)")
    fig = px.scatter(historial_filtrado, x="FechaHora", y="PC",
                     size="Cenizas (BS) (%)", color="Cenizas (BS) (%)",
                     hover_data=["Cenizas (BS) (%)", "PC"],
                     title="Poder Calor√≠fico vs Cenizas",
                     labels={"PC": "Poder Calor√≠fico (kcal/kg)", "FechaHora": "Hora"},
                     template="plotly_dark")
    fig.update_traces(mode="markers+lines")
    st.plotly_chart(fig, use_container_width=True)

# Mostrar cuadro resumen
st.subheader("üóÉÔ∏è Resumen de predicciones recientes (√∫ltimos 20)")
historial_mostrar = historial.sort_values("FechaHora", ascending=False).head(20).copy()
historial_mostrar["Eliminar"] = False
edited_df = st.data_editor(historial_mostrar, num_rows="dynamic", use_container_width=True)

# Bot√≥n para eliminar
if st.button("‚ùå Eliminar seleccionadas"):
    eliminadas = edited_df[edited_df["Eliminar"] == True]
    if not eliminadas.empty:
        historial_actualizado = historial[~historial["FechaHora"].isin(eliminadas["FechaHora"])]
        historial_actualizado.to_csv(historial_path, index=False)
        st.success(f"Se eliminaron {len(eliminadas)} predicciones.")
        st.rerun()
    else:
        st.warning("No se seleccionaron filas para eliminar.")

# Bot√≥n para descargar historial completo
st.subheader("‚¨áÔ∏è Descargar historial completo")
buffer = BytesIO()
historial.to_excel(buffer, index=False, sheet_name="Historial")
st.download_button(
    label="üì• Descargar historial en Excel",
    data=buffer.getvalue(),
    file_name="historial_predicciones.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)